//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file ParticleSource.hh
/// \brief Definition of the ParticleSource class

#ifndef ParticleSource_h
#define ParticleSource_h 1

#include <vector>
#include <fstream>
#include <iostream>
#include <sstream>

#include "G4ThreeVector.hh"
#include "G4SystemOfUnits.hh"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#include "Randomize.hh"
#include "TMath.h"
#pragma GCC diagnostic pop

// Class to specify the properties (geometrical, spectral and polarization) of the input gamma-ray source
class ParticleSource {
public:
    ParticleSource();
    ~ParticleSource();

    /**
     * @brief Set the type of the gamma source, namely "beam" for gamma-ray beam, "radioactive" for radioactive source or "pion" for pion beam
     * @param sourceType_ Type of the source to be set
     */
    void SetSourceType(G4String sourceType_) {
        if (sourceType_ == "beam") {
            // Gamma beam
            sourceTypeInt = 0;
        }
        else if (sourceType_ == "radioactive") {
            // Radioactive source
            sourceTypeInt = 1;
        }
        else if (sourceType_ == "pion") {
            // Radioactive source
            sourceTypeInt = 2;
        }
        else {
            // For unsupported sources, the source will be set (by default) to beam
            sourceTypeInt = 0;
        }
    }
    
    void SetEnergyEdges(G4String Filename);
    void SetEnergySpectrum(G4String Filename);
    void SetPolarizationDegree(G4String Filename);
    /**
     * @brief Set the position of the gamma source
     * @param sourcePosition_ Position of the source to be set
     */
    void SetPosition(G4ThreeVector sourcePosition_) {
        this->sourcePosition = sourcePosition_;
    }
    /**
     * @brief Set the thickness of the gamma source
     * @param radius_ Thickness of the source to be set
     */
    void SetRadius(G4double radius_) {
        this->radius = radius_;
    }
    /**
     * @brief Set the thickness of the gamma source
     * @param thickness_ Thickness of the source to be set
     */
    void SetThickness(G4double thickness_) {
        this->thickness = thickness_;
    }
    /**
     * @brief Set the polarization angle of the gamma ray generated by the source
     * @param polarizationAngle_ Polarization angle to be set
     */
    void SetPolarizationAngle(G4double polarizationAngle_) {
        if (this->sourceTypeInt == 2) {
            G4cout << "Error: Unable to set polarization angle for pion simulation. " << G4endl;
        }
        else {
            this->polarizationAngle = polarizationAngle_;
            // Calculate the Stokes parameters according to the given polarization degrees
            CalStokesParameters();
        }
    }
    /**
     * @brief Set the axis direction of the gamma source
     * @param axisDirection_ Axis direction to be set
     */
    void SetAxisDirection(G4ThreeVector axisDirection_) {
        this->axisDirection = axisDirection_ / axisDirection_.r();
    }
    /**
     * @brief Set the momentum of pions for pion simulation
     * @param pionMomentum_ The momentum of pions in GeV/c
     */
    void SetPionMomentum(G4double pionMomentum_) {
        if (this->sourceTypeInt != 2) {
            G4cout << "Error: unable to set pion momentum for non-pion simulation. Please specify the energy spectrum and edges instead. " << G4endl;
        }
        else if (pionMomentum_ < 0) {
            G4cout << "Error: unable to set the pion momentum as invalud value \"" << pionMomentum_ << "\"" << G4endl;
        }
        else {
            this->pionMomentum = pionMomentum_;
        }
    }
    
    /**
     * @brief Get the edges of each bin in the input spectrum
     * @return Spectrum edges
     */
    std::vector<G4double> GetEnergyEdges() const {
        return this->energyEdges;
    }
    /**
     * @brief Get the count in each bin of the input spectrum
     * @return Bin count of the spectrum
     */
    std::vector<G4double> GetEnergySpectrum() const {
        return this->energySpectrum;
    }
    /**
     * @brief Get the polarization degree in each bin of the input spectrum
     * @return Polarization degree in each energy bin of the input spectrum
     */
    std::vector<G4double> GetPolarizationDegree() const {
        return this->polarizationDegrees;
    }
    /**
     * @brief Get the Stockes parameter in each bin of the input spectrum
     * @return Stockes parameter in each energy bin of the input spectrum
     */
    std::vector<G4ThreeVector> GetStockesParameters() const {
        return this->stokesParameters;
    }
    /**
     * @brief Get the position of the source
     * @return Position of the source in world volume
     */
    G4ThreeVector GetPos() const {
        return this->sourcePosition;
    }
    /**
     * @brief Get the radius of the source
     * @return Radius of the source
     */
    G4double GetRadius() const {
        return this->radius;
    }
    /**
     * @brief Get the thickness of the source
     * @return Thickness of the source
     */
    G4double GetThickness() const {
        return this->thickness;
    }
    /**
     * @brief Get the axis direction of the source
     * @return Axis direction of the source
     */
    G4ThreeVector GetAxisDir() const {
        return this->axisDirection;
    }
    /**
     * @brief Get the type of the source
     * @return Type of the source, with 0 being gamma-ray beam and 1 being radioactive source
     */
    G4int GetSourceType() const {
        return this->sourceTypeInt;
    }
    /**
     * @brief Get the momentum of pions for pion simulation
     * @return The momentum of pions in GeV/c
     */
    G4double GetPionMomentum() const {
        return this->pionMomentum;
    }
    
private:
    // Edges of each bin in the input spectrum
    std::vector<G4double> energyEdges;
    // Count of each bin in the input spectrum
    std::vector<G4double> energySpectrum;
    // Polarization degree of each bin in the input spectrum
    std::vector<G4double> polarizationDegrees;
    // Stokes parameter of each bin in the input spectrum
    std::vector<G4ThreeVector> stokesParameters;

    // Momentum of the pion beam
    G4double pionMomentum = 0;

    // Axis direction of the gamma source, which is also the initial momentum direction of the photons
    G4ThreeVector axisDirection;
    // Position of the source in world volume
    G4ThreeVector sourcePosition;
    // Radius of the source
    G4double radius;
    // Thickness of the source
    G4double thickness = 0;
    // Type of the source, with 0 being (default) gamma-ray beam and 1 being radioactive source
    G4int sourceTypeInt = 1;
    // Gaussian random generator
    G4RandGauss *fRandGauss;
    // Polarization angle of the photons generated by the source
    G4double polarizationAngle = 0;

    void CalStokesParameters();
};

#endif
